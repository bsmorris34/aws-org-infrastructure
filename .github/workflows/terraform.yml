name: Infrastructure CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  TF_VERSION: "1.5.0"
  ANSIBLE_VERSION: "8.0.0"

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible
      run: pip install ansible==${{ env.ANSIBLE_VERSION }}
      
    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: terraform
      
    - name: Generate Ansible Templates
      run: ansible-playbook playbooks/generate-terraform.yml
      working-directory: ansible
      
    - name: Terraform Validate
      run: |
        terraform init -backend=false
        terraform validate
      working-directory: terraform

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible
      run: pip install ansible==${{ env.ANSIBLE_VERSION }}
      
    - name: Generate Templates
      run: ansible-playbook playbooks/generate-terraform.yml
      working-directory: ansible
      
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible
      run: pip install ansible==${{ env.ANSIBLE_VERSION }}
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1
        
    - name: Generate Templates
      run: ansible-playbook playbooks/generate-terraform.yml
      working-directory: ansible
      
    - name: Terraform Plan
      run: |
        terraform init
        terraform plan -no-color
      working-directory: terraform

  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Ansible
      run: pip install ansible==${{ env.ANSIBLE_VERSION }}
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1
        
    - name: Generate Templates
      run: ansible-playbook playbooks/generate-terraform.yml
      working-directory: ansible
      
    - name: Terraform Apply
      run: |
        terraform init
        terraform apply -auto-approve
      working-directory: terraform